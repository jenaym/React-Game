{"ast":null,"code":"import _objectSpread from \"/Users/jenaymcauley/Desktop/React-Game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/jenaymcauley/Desktop/React-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jenaymcauley/Desktop/React-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jenaymcauley/Desktop/React-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jenaymcauley/Desktop/React-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jenaymcauley/Desktop/React-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jenaymcauley/Desktop/React-Game/src/components/Game/index.js\";\nimport React, { Component } from \"react\";\nimport Item from \"../Item\";\nimport imageData from \"../../data.json\";\nimport NavBar from \"../NavBar\";\nimport Header from \"../Header\";\nimport ContentContainer from \"../ContentContainer\";\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      score: 0,\n      topScore: 0,\n      imageData: imageData\n    };\n\n    _this.mixImage = function (imageData) {\n      var i = imageData.length - 1;\n\n      while (i > 0) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var tempSpot = imageData[i];\n        imageData[i] = imageData[j];\n        imageData[j] = tempSpot;\n        i--;\n      }\n\n      return imageData;\n    };\n\n    _this.handleCorrectAnswer = function (updatedScores) {\n      var score = _this.state.score;\n      var topScore = _this.state.topScore;\n      var updatedScore = score + 1;\n      var newTopScore = Math.max(updatedScore, topScore);\n\n      _this.setState({\n        score: updatedScore,\n        topScore: newTopScore,\n        imageData: _this.mixImage(updatedScores)\n      });\n    };\n\n    _this.handleIncorrectAnswer = function (imageData) {\n      var resetGame = imageData.map(function (clickItem) {\n        return _objectSpread({}, clickItem, {\n          clicked: false\n        });\n      });\n\n      _this.setState({\n        score: 0,\n        imageData: _this.mixImage(resetGame)\n      });\n    };\n\n    _this.handleImageClick = function (id) {\n      var correctAnswer = false;\n\n      var newImageData = _this.state.imageData.map(function (clickItem) {\n        var newClickItem = _objectSpread({}, clickItem);\n\n        if (newClickItem.id === id) {\n          if (!newClickItem.clicked) {\n            correctAnswer = true;\n            newClickItem.clicked = true;\n          }\n        }\n\n        return newClickItem;\n      });\n\n      if (correctAnswer) {\n        return _this.handleCorrectAnswer(newImageData);\n      } else {\n        return _this.handleIncorrectAnswer(newImageData);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    //When this component mounts, shuffle the games images\n    value: function componentDidMount() {\n      this.setState({\n        imageData: this.mixImage(this.state.imageData)\n      });\n    } // Function to mix around images on game reset\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(NavBar, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(ContentContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.state.imageData.map(function (clickItem) {\n        return React.createElement(Item, {\n          key: clickItem.id,\n          id: clickItem.id,\n          shake: !_this2.state.score && _this2.state.topScore,\n          handleClick: _this2.handleImageClick,\n          image: clickItem.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/jenaymcauley/Desktop/React-Game/src/components/Game/index.js"],"names":["React","Component","Item","imageData","NavBar","Header","ContentContainer","Game","state","score","topScore","mixImage","i","length","j","Math","floor","random","tempSpot","handleCorrectAnswer","updatedScores","updatedScore","newTopScore","max","setState","handleIncorrectAnswer","resetGame","map","clickItem","clicked","handleImageClick","id","correctAnswer","newImageData","newClickItem","image"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Item from \"../Item\";\nimport imageData from \"../../data.json\";\nimport NavBar from \"../NavBar\";\nimport Header from \"../Header\";\nimport ContentContainer from \"../ContentContainer\";\n\n\nclass Game extends Component {\n    state = {\n        score: 0,\n        topScore: 0,\n        imageData\n    };\n\n    //When this component mounts, shuffle the games images\n    componentDidMount() {\n        this.setState({ imageData: this.mixImage(this.state.imageData) });\n    }\n\n    // Function to mix around images on game reset\n    mixImage = imageData => {\n        let i = imageData.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const tempSpot = imageData[i];\n            imageData[i] = imageData[j];\n            imageData[j] = tempSpot;\n            i--;\n        }\n        return imageData;\n    }\n\n    // Function to handle correct answer\n    handleCorrectAnswer = updatedScores => {\n        const score = this.state.score;\n        const topScore = this.state.topScore;\n        const updatedScore = score + 1;\n        const newTopScore = Math.max(updatedScore, topScore);\n\n        this.setState({\n            score: updatedScore,\n            topScore: newTopScore,\n            imageData: this.mixImage(updatedScores)\n        })\n    }\n\n    //Function to handle incorrect answer\n    handleIncorrectAnswer = imageData => {\n        const resetGame = imageData.map(clickItem => ({\n            ...clickItem,\n            clicked: false \n        }));\n        this.setState({\n            score: 0,\n            imageData: this.mixImage(resetGame)\n        });\n    }\n\n    handleImageClick = id => {\n        let correctAnswer = false;\n        const newImageData = this.state.imageData.map(clickItem => {\n            const newClickItem = { ...clickItem};\n            if (newClickItem.id === id) {\n                if (!newClickItem.clicked) {\n                    correctAnswer = true;\n                    newClickItem.clicked = true;\n                }\n            }\n            return newClickItem;\n        });\n        if (correctAnswer) {\n            return this.handleCorrectAnswer(newImageData)\n        }\n        else {\n            return this.handleIncorrectAnswer(newImageData);\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <NavBar score={this.state.score} topScore={this.state.topScore}\n                />\n                <Header />\n                <ContentContainer>\n                    {this.state.imageData.map(clickItem => (\n                        <Item\n                            key={clickItem.id}\n                            id={clickItem.id}\n                            shake={!this.state.score && this.state.topScore}\n                            handleClick={this.handleImageClick}\n                            image={clickItem.image}\n                        />\n                    ))}\n\n                </ContentContainer>\n            </div>\n        )\n    }\n}\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}