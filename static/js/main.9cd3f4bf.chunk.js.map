{"version":3,"sources":["../clickygame/src/components/Item/index.js","../clickygame/src/components/NavBar/index.js","../clickygame/src/components/Header/index.js","../clickygame/src/components/ContentContainer/index.js","../clickygame/src/components/Game/index.js","../clickygame/src/App.js","../clickygame/src/serviceWorker.js","../clickygame/src/index.js"],"names":["Item","props","react_default","a","createElement","role","aria-label","onClick","handleClick","id","style","backgroundImage","concat","image","className","NavBar","score","topScore","Header","ContentContainer","children","Game","state","imageData","mixImage","i","length","j","Math","floor","random","tempSpot","handleCorrectAnswer","updatedScores","_this","updatedScore","newTopScore","max","setState","handleIncorrectAnswer","resetGame","map","clickItem","Object","objectSpread","clicked","handleImageClick","correctAnswer","newImageData","newClickItem","this","_this2","components_NavBar","components_Header","components_ContentContainer","components_Item","key","shake","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cd3f4bf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Item(props) {\n    return (\n        <div \n        role=\"img\"\n        aria-label=\"item\"\n        onClick={() => props.handleClick(props.id)}\n        style={{ backgroundImage: `url(\"${props.image}\")` }}\n        className={`item`}\n        />\n    );\n}\n\nexport default Item;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction NavBar(props) {\n    return (\n        <nav className=\"navbar\">\n            <ul>\n                <li>\n                    Score: {props.score} | Top Score: {props.topScore}\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default NavBar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <h1>React Click Game</h1>\n            <h3>Click each image only once!</h3>\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ContentContainer(props) {\n    return (\n        <div className=\"container\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default ContentContainer;","import React, {Component} from \"react\";\nimport Item from \"../Item\";\nimport imageData from \"../../data.json\";\nimport NavBar from \"../NavBar\";\nimport Header from \"../Header\";\nimport ContentContainer from \"../ContentContainer\";\n\n\nclass Game extends Component {\n    state = {\n        score: 0,\n        topScore: 0,\n        imageData\n    };\n\n    //When this component mounts, shuffle the games images\n    componentDidMount() {\n        this.setState({ imageData: this.mixImage(this.state.imageData) });\n    }\n\n    // Function to mix around images on game reset\n    mixImage = imageData => {\n        let i = imageData.length - 1;\n        while (i > 0) {\n            const j = Math.floor(Math.random() * (i + 1));\n            const tempSpot = imageData[i];\n            imageData[i] = imageData[j];\n            imageData[j] = tempSpot;\n            i--;\n        }\n        return imageData;\n    }\n\n    // Function to handle correct answer\n    handleCorrectAnswer = updatedScores => {\n        const score = this.state.score;\n        const topScore = this.state.topScore;\n        const updatedScore = score + 1;\n        const newTopScore = Math.max(updatedScore, topScore);\n\n        this.setState({\n            score: updatedScore,\n            topScore: newTopScore,\n            imageData: this.mixImage(updatedScores)\n        })\n    }\n\n    //Function to handle incorrect answer\n    handleIncorrectAnswer = imageData => {\n        const resetGame = imageData.map(clickItem => ({\n            ...clickItem,\n            clicked: false \n        }));\n        this.setState({\n            score: 0,\n            imageData: this.mixImage(resetGame)\n        });\n    }\n\n    handleImageClick = id => {\n        let correctAnswer = false;\n        const newImageData = this.state.imageData.map(clickItem => {\n            const newClickItem = { ...clickItem};\n            if (newClickItem.id === id) {\n                if (!newClickItem.clicked) {\n                    correctAnswer = true;\n                    newClickItem.clicked = true;\n                }\n            }\n            return newClickItem;\n        });\n        if (correctAnswer) {\n            return this.handleCorrectAnswer(newImageData)\n        }\n        else {\n            return this.handleIncorrectAnswer(newImageData);\n        }\n    }\n\n\n    render() {\n        return (\n            <div>\n                <NavBar score={this.state.score} topScore={this.state.topScore}\n                />\n                <Header />\n                <ContentContainer>\n                    {this.state.imageData.map(clickItem => (\n                        <Item\n                            key={clickItem.id}\n                            id={clickItem.id}\n                            shake={!this.state.score && this.state.topScore}\n                            handleClick={this.handleImageClick}\n                            image={clickItem.image}\n                        />\n                    ))}\n\n                </ContentContainer>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport Game from \"./components/Game\"\n\nfunction App() {\n  return <Game />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}